/* mbed Microcontroller Library
 * Copyright (c) 2019 ARM Limited
 * SPDX-License-Identifier: Apache-2.0
 */

#include "mbed.h"
#include <cstdio>              // for sscanf()

Serial pc(USBTX, USBRX);      // USB virtual COM port
PwmOut pan_servo(D3);         // First servo on D3
PwmOut tilt_servo(D5);        // Second servo on D5

const int  buffer_size = 64;
char       buffer[buffer_size];
int        idx = 0;

// Servo parameters (normalized duty-cycle for 20 ms period)
const float leftPulse   = 0.05f;   // ≈0°
const float centerPulse = 0.075f;  // ≈90°
const float rightPulse  = 0.10f;   // ≈180°

float duty_pan  = centerPulse;
float duty_tilt = centerPulse;

int main() {
    pc.baud(9600);                       // USB‑Serial at 9600 baud
    pan_servo.period_ms(20);             // 20 ms period
    tilt_servo.period_ms(20);

    // initialize to center
    pan_servo.write(duty_pan);
    tilt_servo.write(duty_tilt);

    while (true) {
        if (!pc.readable()) {
            continue;
        }
        char c = pc.getc();

        // end of line: try to parse
        if (c == '\n' || c == '\r') {
            buffer[idx] = '\0';
            idx = 0;

            float pan_val, tilt_val;
            int items = sscanf(buffer, "%f %f", &pan_val, &tilt_val);
            if (items == 2) {
                // clamp to allowed range if you like:
                duty_pan  = pan_val;
                duty_tilt = tilt_val;

                pan_servo.write(duty_pan);
                tilt_servo.write(duty_tilt);
            }
        }
        else if (idx < buffer_size - 1) {
            buffer[idx++] = c;
        }
    }
}
